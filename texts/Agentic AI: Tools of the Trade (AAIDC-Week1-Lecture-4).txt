Agentic AI: Tools of the Trade (AAIDC-Week1-Lecture-4)

Tools and Frameworks
The field of Agentic AI offers a variety of tools and frameworks to build agents, from code-based solutions for developers to visual interfaces for non-coders.

Code-Based Frameworks
For developers who want granular control over workflows, memory, and multi-agent collaboration:

LangGraph
Developed by the team behind LangChain, LangGraph takes things further by letting you design AI workflows as visual graphs. Imagine building a customer support system where one agent handles initial queries, another escalates complex issues, and a third schedules follow-ups; all connected like nodes on a flowchart. Itâ€™s perfect for multi-step processes that need to "remember" where they are in a task.
ðŸ”— 
Docs
 | 
GitHub
Microsoft AutoGen
AutoGen is Microsoftâ€™s answer to collaborative AI. With Microsoft AutoGen, you can have a system where one agent writes code, another reviews it for errors, and a third tests the final script. These agents debate, self-correct, and even use tools like APIS or calculators. It is ideal for coding teams or research projects where multiple perspectives matter.
ðŸ”— 
Docs
 | 
GitHub
CrewAI
CrewAI organises agents into specialised roles, like a startup team. For example, a "Researcher" agent scours the web for data, a "Writer" drafts a report, and an "Editor" polishes it. They pass tasks back and forth, refining their work until itâ€™s ready to ship with no micromanaging required.
ðŸ”— 
Docs
 | 
GitHub
LlamaIndex
Formerly called GPT Index, LlamaIndex acts like a librarian for your AI agents. If you need your agent to reference a 100-page PDF, a SQL database, and a weather API, LlamaIndex is the framework to go to. It helps it fetch and connect data from all these sources, ensuring responses are informed and accurate.
ðŸ”— 
Docs
 | 
GitHub
Pydantic AI
This is one of my best frameworks for building Agents because it makes it very easy and allows you to have a structured output easily. It was built by the same people behind Pydantic. We will still dive deeper into it in the coming sections.
ðŸ”— 
Docs
 | 
GitHub
OpenAI Swarm
OpenAIâ€™s experimental Swarm framework explores how lightweight AI agents can solve tasks collaboratively. One agent gathers data, another analyses it, and a third acts on it. Itâ€™s not ready for production yet but it's worth mentioning.
ðŸ”— 
GitHub
Visual (GUI) Frameworks
Rivet
Rivet is like digital LEGO for AI. You just have to drag and drop nodes to connect ChatGPT to your CRM, add a "send email" action, and voilÃ , youâ€™ve built an agent that auto-replies to customer inquiries. Perfect for business teams who want automation without coding.
ðŸ”— 
Website
Vellum
Vellum is the Swiss Army knife for prompt engineers. It allows you to test 10 versions of a prompt side-by-side, see which one gives the best results, and deploy it to your agent, all through a clean interface. Itâ€™s like A/B testing for AI workflows.
ðŸ”— 
Website
Langflow
Langflow is the drag-and-drop alternative to LangChain. You can just drag a "web search" node into your workflow, link it to a "summarize" node, and watch your agent turn a 10-article search into a crisp summary. It is great for explaining AI logic to your CEO.
ðŸ”— 
Website
Flowise AI
Flowise AI is the open-source cousin of Langflow. You can use it to build a chatbot that answers HR questions by just linking your company handbook to an LLMâ€”no coding, just drag, drop, and deploy.
ðŸ”— 
Website
Chatbase
Chatbase lets you train a ChatGPT-like assistant on your own data. Upload your FAQ PDFs, tweak the design to match your brand, and embed them on your website. Itâ€™s like having a 24/7 customer service rep who actually reads the manual.
ðŸ”— 
Website
Factors for choosing a Framework
1. Use Case: What's your agent's primary purpose? Different frameworks excel at different tasks.

2. Level of Abstraction: Do you want full control over prompts, memory, and workflows, or a higher-level framework that handles those under the hood?

3. Criticality: Is this a mission-critical system? Choose battle-tested tools for essential applications.

4. Team Skills: Do you have Python experts, or would no-code tools be more appropriate?

5. Time/Budget: Need a quick solution or have resources for a more custom approach?

6. Integration Requirements: Will you need to connect with external systems like Slack, Jira, etc.?

7. Scalability Considerations: Think about monitoring, logging, and auto-scaling if you'll serve many users.

ðŸŽ¥ A Perspective on Picking the Right Framework
Watch this short video to clarify how to approach framework choices in Agentic AI, whether you're building a quick personal project or laying the foundation for long-term enterprise code.

Youâ€™ll explore how personal projects benefit from speed and flexibility, while company decisions demand maturity, support, and long-term thinking. Featuring real examples from industry and startup experience.
